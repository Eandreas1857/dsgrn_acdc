# test_get_FP_Poset.py

import pytest
import sys
sys.path.insert(0,'/home/elizabeth/Desktop/GIT/dsgrn_acdc/src')
from get_FP_Poset import *

def test_get_FP_Poset_Fullconn():

    FP_Poset = {
    'FP { 1, 2, 0, 0 }': [ 'FP { 1, 1, 0, 0 }',  'FP { 2, 2, 0, 0 }'],
    'FP { 1, 1, 0, 0 }': ['FP { 2, 1, 0, 0 }'],
    'FP { 2, 2, 0, 0 }': ['FP { 2, 1, 0, 0 }'],

    'FP { 2, 1, 0, 0 }': [ 'FP { 2, 0, 0, 0 }',  'FP { 2, 1, 1, 0 }'],
    'FP { 2, 0, 0, 0 }': ['FP { 2, 0, 1, 0 }'],
    'FP { 2, 1, 1, 0 }': ['FP { 2, 0, 1, 0 }'],

    'FP { 2, 0, 1, 0 }': [ 'FP { 1, 0, 1, 0 }',  'FP { 2, 0, 2, 0 }'],
    'FP { 1, 0, 1, 0 }': ['FP { 1, 0, 2, 0 }'],
    'FP { 2, 0, 2, 0 }': ['FP { 1, 0, 2, 0 }'],

    'FP { 1, 0, 2, 0 }': [ 'FP { 0, 0, 2, 0 }',  'FP { 1, 0, 2, 1 }'],
    'FP { 0, 0, 2, 0 }': ['FP { 0, 0, 2, 1 }'],
    'FP { 1, 0, 2, 1 }': ['FP { 0, 0, 2, 1 }'],

    'FP { 0, 0, 2, 1 }': [ 'FP { 0, 0, 1, 1 }',  'FP { 0, 0, 2, 2 }'],
    'FP { 0, 0, 1, 1 }': ['FP { 0, 0, 1, 2 }'],
    'FP { 0, 0, 2, 2 }': ['FP { 0, 0, 1, 2 }'],

    'FP { 0, 0, 1, 2 }': [ 'FP { 0, 1, 1, 2 }',  'FP { 0, 0, 0, 2 }'],
    'FP { 0, 1, 1, 2 }': ['FP { 0, 1, 0, 2 }'],
    'FP { 0, 0, 0, 2 }': ['FP { 0, 1, 0, 2 }'],

    'FP { 0, 1, 0, 2 }': [ 'FP { 0, 2, 0, 2 }',  'FP { 0, 1, 0, 1 }'],
    'FP { 0, 2, 0, 2 }': ['FP { 0, 2, 0, 1 }'],
    'FP { 0, 1, 0, 1 }': ['FP { 0, 2, 0, 1 }'],
    'FP { 0, 2, 0, 1 }': []
    }

    out_edges = {'Hb': 2, 'Gt': 2, 'Kr': 2, 'Kni': 2}

    FP_pattern, FP_Region = get_FP_Poset(out_edges)

    for i in FP_Poset:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])

    for i in FP_pattern:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])

def test_get_FP_Poset_StrongEdges():

    FP_Poset = {
     'FP { 0, 3, 0, 0 }': [ 'FP { 1, 3, 0, 0 }',  'FP { 0, 2, 0, 0 }'],
     'FP { 1, 3, 0, 0 }': ['FP { 1, 2, 0, 0 }'],
     'FP { 0, 2, 0, 0 }': ['FP { 1, 2, 0, 0 }', 'FP { 0, 1, 0, 0 }'],
     'FP { 0, 1, 0, 0 }': ['FP { 1, 1, 0, 0 }'],


     'FP { 1, 2, 0, 0 }': ['FP { 1, 1, 0, 0 }'],
     'FP { 1, 1, 0, 0 }': ['FP { 1, 0, 0, 0 }'],

     'FP { 1, 0, 0, 0 }': ['FP { 0, 0, 0, 0 }', 'FP { 1, 0, 1, 0 }'],
     'FP { 0, 0, 0, 0 }': ['FP { 0, 0, 1, 0 }'],
     'FP { 1, 0, 1, 0 }': ['FP { 0, 0, 1, 0 }'],

     'FP { 0, 0, 1, 0 }': ['FP { 0, 0, 1, 1 }'],

     'FP { 0, 0, 1, 1 }': ['FP { 0, 0, 1, 2 }', 'FP { 0, 0, 0, 1 }'],
     'FP { 0, 0, 0, 1 }': ['FP { 0, 0, 0, 2 }'],
     'FP { 0, 0, 1, 2 }': ['FP { 0, 0, 1, 3 }', 'FP { 0, 0, 0, 2 }'],
     'FP { 0, 0, 0, 2 }': ['FP { 0, 0, 0, 3 }'],
     'FP { 0, 0, 1, 3 }': ['FP { 0, 0, 0, 3 }'],

     'FP { 0, 0, 0, 3 }': ['FP { 0, 1, 0, 3 }'],

     'FP { 0, 1, 0, 3 }': ['FP { 0, 2, 0, 3 }', 'FP { 0, 1, 0, 2 }'],
     'FP { 0, 1, 0, 2 }': ['FP { 0, 2, 0, 2 }', 'FP { 0, 1, 0, 1 }'],
     'FP { 0, 2, 0, 3 }': ['FP { 0, 2, 0, 2 }', 'FP { 0, 3, 0, 3 }'],
     'FP { 0, 2, 0, 2 }': ['FP { 0, 2, 0, 1 }', 'FP { 0, 3, 0, 2 }'],
     'FP { 0, 3, 0, 3 }': ['FP { 0, 3, 0, 2 }'],
     'FP { 0, 1, 0, 1 }': ['FP { 0, 2, 0, 1 }'],
     'FP { 0, 2, 0, 1 }': ['FP { 0, 3, 0, 1 }'],

     'FP { 0, 3, 0, 2 }': ['FP { 0, 3, 0, 1 }'], 
     'FP { 0, 3, 0, 1 }': []
    }

    regions = {1: ['FP { 0, 3, 0, 0 }', 'FP { 1, 3, 0, 0 }',
                'FP { 0, 2, 0, 0 }',
                'FP { 0, 1, 0, 0 }'],
                            2: [ 'FP { 1, 2, 0, 0 }',
                'FP { 1, 1, 0, 0 }'],
                            3: ['FP { 1, 0, 0, 0 }', 'FP { 0, 0, 0, 0 }',
                'FP { 1, 0, 1, 0 }'],
                            4: [ 'FP { 0, 0, 1, 0 }'],
                            5: ['FP { 0, 0, 1, 1 }', 'FP { 0, 0, 0, 1 }',
                'FP { 0, 0, 1, 2 }',
                'FP { 0, 0, 0, 2 }',
                'FP { 0, 0, 1, 3 }'],
                            6: ['FP { 0, 0, 0, 3 }'],
                            7: ['FP { 0, 1, 0, 3 }', 'FP { 0, 1, 0, 2 }',
                'FP { 0, 2, 0, 3 }',
                'FP { 0, 2, 0, 2 }',
                'FP { 0, 3, 0, 3 }',
                'FP { 0, 1, 0, 1 }',
                'FP { 0, 2, 0, 1 }'],
                            8: ['FP { 0, 3, 0, 2 }',
                'FP { 0, 3, 0, 1 }']}

    out_edges = {'Hb': 1, 'Gt': 3, 'Kr': 1, 'Kni': 3}

    FP_pattern, FP_Region = get_FP_Poset(out_edges)

    for i in FP_Poset:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])

    for i in FP_pattern:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])
    
    for i in regions:
        assert sorted(FP_Region[i]) == sorted(regions[i])

def test_get_FP_Poset_Random():

    FP_Poset = {'FP { 0, 2, 0, 0 }': ['FP { 1, 2, 0, 0 }', 'FP { 0, 1, 0, 0 }'],
                'FP { 0, 1, 0, 0 }': ['FP { 1, 1, 0, 0 }'],
                'FP { 1, 1, 0, 0 }': ['FP { 1, 0, 0, 0 }', 'FP { 1, 1, 1, 0 }'],
                'FP { 1, 2, 0, 0 }': ['FP { 1, 1, 0, 0 }'],
                'FP { 1, 1, 1, 0 }': ['FP { 1, 0, 1, 0 }'],
                'FP { 1, 0, 1, 0 }': ['FP { 0, 0, 1, 0 }', 'FP { 1, 0, 2, 0 }'],
                'FP { 1, 0, 0, 0 }': ['FP { 1, 0, 1, 0 }'],
                'FP { 1, 0, 2, 0 }': ['FP { 0, 0, 2, 0 }'],
                'FP { 0, 0, 2, 0 }': ['FP { 0, 0, 2, 1 }'],
                'FP { 0, 0, 1, 0 }': ['FP { 0, 0, 2, 0 }'],
                'FP { 0, 0, 2, 1 }': ['FP { 0, 0, 2, 2 }', 'FP { 0, 0, 1, 1 }'],
                'FP { 0, 0, 2, 2 }': ['FP { 0, 0, 1, 2 }', 'FP { 0, 0, 2, 3 }'],
                'FP { 0, 0, 2, 3 }': ['FP { 0, 0, 1, 3 }'],
                'FP { 0, 0, 1, 3 }': ['FP { 0, 1, 1, 3 }', 'FP { 0, 0, 0, 3 }'],
                'FP { 0, 0, 1, 2 }': ['FP { 0, 0, 1, 3 }'],
                'FP { 0, 0, 1, 1 }': ['FP { 0, 0, 1, 2 }'],
                'FP { 0, 0, 0, 3 }': ['FP { 0, 1, 0, 3 }'],
                'FP { 0, 1, 0, 3 }': ['FP { 0, 2, 0, 3 }', 'FP { 0, 1, 0, 2 }'],
                'FP { 0, 1, 1, 3 }': ['FP { 0, 1, 0, 3 }'],
                'FP { 0, 1, 0, 2 }': ['FP { 0, 2, 0, 2 }', 'FP { 0, 1, 0, 1 }'],
                'FP { 0, 1, 0, 1 }': ['FP { 0, 2, 0, 1 }'],
                'FP { 0, 2, 0, 1 }': [],
                'FP { 0, 2, 0, 2 }': ['FP { 0, 2, 0, 1 }'],
                'FP { 0, 2, 0, 3 }': ['FP { 0, 2, 0, 2 }']}

    out_edges = {'Hb': 1, 'Gt': 2, 'Kr': 2, 'Kni': 3}

    FP_pattern, FP_Region = get_FP_Poset(out_edges)

    for i in FP_Poset:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])

    for i in FP_pattern:
        assert sorted(FP_Poset[i]) == sorted(FP_pattern[i])  

def test_get_FP_Poset_SUN():

    regions = {1: ['FP { 0, 1, 0, 0 }', 'FP { 0, 2, 0, 0 }', 'FP { 1, 2, 0, 0 }'],
                2: ['FP { 1, 1, 0, 0 }'],
                3: ['FP { 0, 0, 0, 0 }', 'FP { 1, 0, 0, 0 }', 'FP { 1, 0, 1, 0 }'],
                4: ['FP { 0, 0, 1, 0 }'],
                5: ['FP { 0, 0, 0, 1 }', 'FP { 0, 0, 1, 1 }', 'FP { 0, 0, 1, 2 }'],
                6: ['FP { 0, 0, 0, 2 }'],
                7: ['FP { 0, 1, 0, 1 }', 'FP { 0, 1, 0, 2 }', 'FP { 0, 2, 0, 2 }'],
                8: ['FP { 0, 2, 0, 1 }']}     

    out_edges = {'Hb': 1, 'Gt': 2, 'Kr': 1, 'Kni': 2}
    FP_Poset, FP_Regions = get_FP_Poset(out_edges)

    for i in regions:
        assert sorted(FP_Regions[i]) == sorted(regions[i])